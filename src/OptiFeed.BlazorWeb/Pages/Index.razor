@page "/"
@using System.Globalization
@using OptiFeed.Core.Dtos
@inject IAnimalRepository AnimalRepository
@inject IFeedRepository FeedRepository
@inject IRationRepository RationRepository

<RadzenStack class="rz-p-2 rz-p-md-12" JustifyContent="JustifyContent.SpaceBetween" AlignItems="AlignItems.Center">
    <RadzenCardGroup Responsive="@responsive">
        <RadzenCard Variant="@variant" Style="display: inline-flex;margin-right: 10px">
            <RadzenStack JustifyContent="JustifyContent.SpaceBetween" Gap="10rem">
                <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Start" JustifyContent="JustifyContent.SpaceBetween">
                    <RadzenText TextStyle="TextStyle.H6">Animals</RadzenText>
                    <RadzenText TextStyle="TextStyle.H2" class="rz-m-0">@animalCount</RadzenText>
                </RadzenStack>
            </RadzenStack>
        </RadzenCard>
        <RadzenCard Variant="@variant" Style="display: inline-flex;margin-right: 10px;">
            <RadzenStack JustifyContent="JustifyContent.SpaceBetween" Gap="10rem">
                <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Start" JustifyContent="JustifyContent.SpaceBetween">
                    <RadzenText TextStyle="TextStyle.H6">Feeds</RadzenText>
                    <RadzenText TextStyle="TextStyle.H2" class="rz-m-0">@feedCount</RadzenText>
                </RadzenStack>
            </RadzenStack>
        </RadzenCard>
        <RadzenCard Variant="@variant" Style="display: inline-flex">
            <RadzenStack JustifyContent="JustifyContent.SpaceBetween" Gap="10rem">
                <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Start" JustifyContent="JustifyContent.SpaceBetween">
                    <RadzenText TextStyle="TextStyle.H6">Rations</RadzenText>
                    <RadzenText TextStyle="TextStyle.H2" class="rz-m-0">@rationCount</RadzenText>
                </RadzenStack>
            </RadzenStack>
        </RadzenCard>
    </RadzenCardGroup>
</RadzenStack>

<MDivider></MDivider>


<div class="rz-p-0 rz-p-md-12">
    <MCardTitle Style="justify-content: center">Feed - Stock</MCardTitle>
    <RadzenStack>
        @if (feedAndStock != null)
        {
            <RadzenChart ColorScheme="ColorScheme.Monochrome">
                <RadzenColumnSeries Title="Stock" Data="@feedAndStock" CategoryProperty="FeedName" ValueProperty="Stock"/>
            </RadzenChart>
        }
        else
        {
            <div class="rz-m-12">
                <RadzenProgressBar Value="100" ShowValue="false" Mode="ProgressBarMode.Indeterminate" />
            </div>
        }

    </RadzenStack>
</div>

<MDivider></MDivider>

<div class="rz-p-0 rz-p-md-12">
    <MCardTitle Style="justify-content: center">Feed - Price</MCardTitle>
    <RadzenStack class="rz-p-0 rz-p-md-6 rz-p-lg-12">
        @if (feedAndPrice != null)
        {
            <RadzenChart>
                <RadzenLineSeries Smooth="true" Data="@feedAndPrice" CategoryProperty="FeedName" Title="Price" ValueProperty="Price" RenderingOrder="1">
                    <RadzenMarkers MarkerType="MarkerType.Circle"/>
                </RadzenLineSeries>
                <RadzenCategoryAxis Padding="20"/>
                <RadzenValueAxis>
                    <RadzenGridLines Visible="true"/>
                    <RadzenAxisTitle Text="USD"/>
                </RadzenValueAxis>
            </RadzenChart>
        }
        else
        {
            <div class="rz-m-12">
                <RadzenProgressBar Value="100" ShowValue="false" Mode="ProgressBarMode.Indeterminate" />
            </div>
        }
        
    </RadzenStack>
</div>



@code {
    bool responsive = true;

    Variant variant = Variant.Filled;

    int animalCount;
    int feedCount;
    int rationCount;

    private List<FeedAndStockDto> feedAndStock;
    private List<FeedAndPriceDto> feedAndPrice;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        animalCount = await AnimalRepository.GetAnimalCountAsync();
        feedCount = await FeedRepository.GetFeedCountAsync();
        rationCount = await RationRepository.GetRationCountAsync();
        await FeedAndStockChart();
        await FeedAndPriceChart();
    }

    async Task FeedAndStockChart()
    {
        feedAndStock = await FeedRepository.FeedAndStockChartAsync();
    }

    async Task FeedAndPriceChart()
    {
        feedAndPrice = await FeedRepository.FeedAndPriceChartAsync();
    }
    
    string FormatAsUSD(object value)
    {
        return ((double)value).ToString("C0", CultureInfo.CreateSpecificCulture("en-US"));
    }
}
