@page "/feeds"
@using OptiFeed.Core.Models
@using ClosedXML.Excel
@using Microsoft.AspNetCore.Components.Forms
@inject IFeedRepository FeedRepository


<MCard>
    <MCardTitle>
        <MSpacer></MSpacer>
        <MTextField @bind-Value="_search"
                    AppendIcon="mdi-magnify"
                    Label="Search"
                    SingleLine
                    HideDetails="true"></MTextField>
    </MCardTitle>
    <MDataTable Headers="_headers"
                Items="_feeds"
                Search="@_search"
                Class="elevation-1">
        <TopContent>
            <MToolbar Flat>
                <MToolbarTitle>Feeds</MToolbarTitle>
                <MDivider Class="mx-4"
                          Inset
                          Vertical></MDivider>
                <MSpacer></MSpacer>
                <MFileInput TValue="IBrowserFile"
                            Style="margin-right:150px;"
                            OnChange="Upload"
                            Label="Multiple Feed from Excel"></MFileInput>
                <MButton Color="primary"
                         Dark
                         Class="mb-2"
                         OnClick="()=>_dialog=true">
                    New Feed
                </MButton>
                <MDialog @bind-Value="_dialog"
                         MaxWidth="500">
                    <MCard>
                        <MCardTitle>
                            <span class="text-h5">@FormTitle</span>
                        </MCardTitle>

                        <MCardText>
                            <MContainer>
                                <MRow>
                                    <MCol Cols="12"
                                          Sm="12"
                                          Md="12">
                                        <MTextField @bind-Value="feed.Name"
                                                    Label="Feed name"></MTextField>
                                    </MCol>
                                    <MCol Cols="12"
                                          Sm="6"
                                          Md="4">
                                        <MTextField @bind-Value="feed.DryMatter"
                                                    Label="Dry Matter (%)"></MTextField>
                                    </MCol>
                                    using OptiFeed.Persistence.Repositories;
                                    <MCol Cols="12"
                                          Sm="6"
                                          Md="4">
                                        <MTextField @bind-Value="feed.EnergyContent"
                                                    Label="EnergyContent (Mcal/kg)"></MTextField>
                                    </MCol>
                                    <MCol Cols="12"
                                          Sm="6"
                                          Md="4">
                                        <MTextField @bind-Value="feed.ProteinContent"
                                                    Label="Protein (g/kg)"></MTextField>
                                    </MCol>
                                    <MCol Cols="12"
                                          Sm="6"
                                          Md="4">
                                        <MTextField @bind-Value="feed.CostPerKg"
                                                    Label="Cost ($/kg)"></MTextField>
                                    </MCol>
                                    <MCol Cols="12"
                                          Sm="6"
                                          Md="4">
                                        <MTextField @bind-Value="feed.MinUsage"
                                                    Label="MinUsage (%)"></MTextField>
                                    </MCol>
                                    <MCol Cols="12"
                                          Sm="6"
                                          Md="4">
                                        <MTextField @bind-Value="feed.MaxUsage"
                                                    Label="MaxUsage (%)"></MTextField>
                                    </MCol>

                                </MRow>
                            </MContainer>
                        </MCardText>

                        <MCardActions>
                            <MSpacer></MSpacer>
                            <MButton Color="blue darken-1"
                                     Text
                                     OnClick="Close">
                                Cancel
                            </MButton>
                            <MButton Color="blue darken-1"
                                     Text
                                     OnClick="Save">
                                Save
                            </MButton>
                        </MCardActions>
                    </MCard>
                </MDialog>
                <MDialog @bind-Value="_dialogDelete" MaxWidth="500">
                    <MCard>
                        <MCardTitle Class="text-h5">Are you sure you want to delete this feed?</MCardTitle>
                        <MCardActions>
                            <MSpacer></MSpacer>
                            <MButton Color="blue darken-1" Text OnClick="CloseDelete">Cancel</MButton>
                            <MButton Color="blue darken-1" Text OnClick="DeleteItemConfirm">OK</MButton>
                            <MSpacer></MSpacer>
                        </MCardActions>
                    </MCard>
                </MDialog>
            </MToolbar>
        </TopContent>
        <ItemColContent>
            @if (context.Header.Value == "actions")
            {
                <MIcon Small
                       Class="mr-2"
                       OnClick="()=>EditItem(context.Item.Id)">mdi-pencil</MIcon>
                <MIcon Small
                       OnClick="()=>DeleteItem(context.Item.Id)">mdi-delete</MIcon>
            }
            else
            {
                @context.Value
            }
        </ItemColContent>
        <NoDataContent>

        </NoDataContent>
    </MDataTable>
</MCard>
@code {

    private string _search;


    private List<DataTableHeader<Feed>> _headers = new List<DataTableHeader<Feed>>
{
          new (){ Text= "Name", Value= nameof(Feed.Name),Sortable = true},
          new (){ Text= "Dry Matter (%)", Value= nameof(Feed.DryMatter),Sortable = true},
          new (){ Text= "Energy (Mcal/kg)", Value= nameof(Feed.EnergyContent),Sortable = true},
          new (){ Text= "Protein (g/kg)", Value= nameof(Feed.ProteinContent),Sortable = true},
          new (){ Text= "ADF (%/kg)", Value= nameof(Feed.ProteinContent),Sortable = false},
          new (){ Text= "NDF (%/kg)", Value= nameof(Feed.ProteinContent),Sortable = false},
          new (){ Text= "Cost ($/kg)", Value= nameof(Feed.CostPerKg),Sortable = true},
          new (){ Text= "Min Usage (%)", Value= nameof(Feed.MinUsage),Sortable = true},
          new (){ Text= "Max Usage (%)", Value= nameof(Feed.MaxUsage),Sortable = true},
          new (){ Text= "Actions", Value= "actions",Sortable=false }
    };

    private IList<Feed> _feeds;
    private Feed feed = new();

    private bool _dialog;
    private bool _dialogDelete;

    public string FormTitle
    {
        get
        {
            return feed.Id == 0 ? "New Feed" : "Edit Feed";
        }
    }

    protected override async Task OnInitializedAsync()
    {
        await Initialize();
    }


    public async Task Initialize()
    {
        _feeds = await FeedRepository.GetFeedsAsync();
    }

    public void Close()
    {
        _dialog = false;
        feed = new Feed();
    }

    public async Task Save()
    {
        if (feed.Id != 0)
        {
            await FeedRepository.UpdateFeedAsync(feed);
            await Initialize();
            StateHasChanged();
        }
        else
        {
            await FeedRepository.AddFeedAsync(feed);
            await Initialize();
            StateHasChanged();
        }
        Close();
    }



    public void EditItem(int id)
    {
        feed = _feeds.SingleOrDefault(x => x.Id == id)!;
        _dialog = true;
    }

    private Feed deletedFeed;
    public void DeleteItem(int id)
    {
        deletedFeed = _feeds.SingleOrDefault(x => x.Id == id)!;
        _dialogDelete = true;
    }

    public async Task DeleteItemConfirm()
    {
        await FeedRepository.DeleteFeedAsync(deletedFeed);
        CloseDelete();
        await Initialize();
        StateHasChanged();
    }

    public void CloseDelete()
    {
        _dialogDelete = false;
    }

    private async Task Upload(IBrowserFile file)
    {
        //Yemler.xlsx
        string path = $"C:/Users/W10/OneDrive/Desktop/{file.Name}";
        if (!string.IsNullOrEmpty(path))
        {
            using var workbook = new XLWorkbook(path);

            var worksheet = workbook.Worksheets.First();
            var rows = worksheet.RowsUsed().Skip(1);


            foreach (var row in rows)
            {
                var feed = new Feed()
                {
                    Name = row.Cell(1).GetValue<string>(),
                    EnergyContent = row.Cell(2).GetValue<Double>(),
                    DryMatter = row.Cell(3).GetValue<Double>(),
                    ProteinContent = row.Cell(4).GetValue<double>(),
                    ADFContent = row.Cell(5).GetValue<Double>(),
                    NDFContent = row.Cell(6).GetValue<Double>(),
                    MinUsage = row.Cell(7).GetValue<Double>(),
                    MaxUsage = row.Cell(8).GetValue<Double>(),
                    CostPerKg = row.Cell(9).GetValue<Double>()
                };

                await FeedRepository.AddFeedAsync(feed);
            }

            await Initialize();
            StateHasChanged();
        }
        else
        {
            return;
        }


    }
}
