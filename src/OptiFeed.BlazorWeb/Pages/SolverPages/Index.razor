@page "/solver"
@using System.Collections.ObjectModel
@using OptiFeed.Core.Result
@inject IFeedRepository FeedRepository

<MStepper Value="_step">
    <MStepperHeader>
        <MStepperStep Step="1" Complete="_step>1">
            Enter Information
        </MStepperStep>
        <MDivider></MDivider>
        <MStepperStep Step="2" Complete="_step>2">
            Select Feeds
        </MStepperStep>
        <MDivider></MDivider>
        <MStepperStep Step="3">
            Result
        </MStepperStep>
    </MStepperHeader>

    <MStepperItems>
        <MStepperContent Step="1">
            <MRow>
                <MCol>
                    <MCard>

                        <MCardTitle Style="justify-content: center">Cow Information</MCardTitle>
                        <MForm Model="Animal"
                               AutoLabel
                               Class="mx-auto"
                               Style="width: 400px">
                            <MTextField Label="Live weight" @bind-Value="Animal.LiveWeight" Type="number" Filled></MTextField>
                            <MTextField Label="Daily milk yield" @bind-Value="Animal.DailyMilkYield" Type="number" Filled></MTextField>
                            <MTextField Label="Milk fat" @bind-Value="Animal.MilkFat" Type="number" Filled></MTextField>
                            <MTextField Label="Milk Protein" @bind-Value="Animal.MilkProtein" Type="number" Filled></MTextField>
                        </MForm>
                    </MCard>
                </MCol>
                <MCol>

                    <MCard>
                        <MCardTitle Style="justify-content: center">Requirements</MCardTitle>
                        <MList>
                            <MListItem>Dry Matter (kg): @Animal.CalculateDryMatterRequirement()</MListItem>
                            <MListItem>Energy (MCal): @Animal.CalculateEnergyRequirement()</MListItem>
                            <MListItem>Protein (g): @Animal.CalculateProteinRequirement()</MListItem>
                            <MListItem>Adf (%): @Animal.CalculateADFRequirement()</MListItem>
                            <MListItem>Ndf (%): @Animal.CalculateDryMatterRequirement()</MListItem>
                        </MList>
                    </MCard>
                </MCol>
            </MRow>
            <MButton Style="margin-top: 10px" Color="primary" Disabled=@(Animal.LiveWeight == 0 ? true : false) OnClick="() => _step = 2">Next</MButton>
        </MStepperContent>
        <MStepperContent Step="2">
            <MCard Color="grey lighten-1" Style="margin-bottom:20px;margin-left:170px; margin-right:170px;">
                <RadzenStack Orientation="Orientation.Horizontal">
                    <RadzenDataGrid Data="@sourceFeeds" AllowFiltering="true" AllowSorting="true" PageSize="5" AllowPaging="true"
                                    RowRender="@RowRender" ondragover="event.preventDefault()" @ondrop=@(args => Move(targetFeeds, sourceFeeds))>
                        <Columns>
                            @RenderColumns()
                        </Columns>
                    </RadzenDataGrid>
                    <RadzenDataGrid Data="@targetFeeds" AllowFiltering="true" AllowSorting="true" PageSize="5" AllowPaging="true"
                                    RowRender="@RowRender" ondragover="event.preventDefault()" @ondrop=@(args => Move(sourceFeeds, targetFeeds))>
                        <Columns>
                            @RenderColumns()
                        </Columns>
                    </RadzenDataGrid>
                </RadzenStack>
            </MCard>
            <MButton Color="primary" Disabled=@(targetFeeds.Count == 0 ? true : false) OnClick="()=>Calculate()">Next</MButton>
            <MButton Color="error" OnClick="()=>_step=1">Back</MButton>
        </MStepperContent>
        <MStepperContent Step="3">
            <MCard Color="grey lighten-1" Style="margin-bottom:20px;">
                @if (result == null)
                {
                    <MProgressLinear Color="lime" Indeterminate Reverse></MProgressLinear>
                }
                else
                {
                    <MSimpleTable>
                        <thead>
                            <tr>
                                <th class="text-left">
                                    Feed Name
                                </th>
                                <th class="text-left">
                                    Price
                                </th>
                                <th class="text-left">
                                    Amoung (Kg)
                                </th>
                                <th class="text-left">
                                    Percentage (%)
                                </th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var item in result.FeedMixes)
                            {
                                <tr @key="item.FeedName">
                                    <td>@item.FeedName</td>
                                    <td>@item.PricePerKg</td>
                                    <td>@(item.UsageAmountKg.ToString("#.##"))</td>
                                    <td>@(item.UsagePercentage.ToString("#.##"))</td>
                                </tr>
                            }
                        </tbody>
                        <tfoot style="color:red;">
                            <tr>
                                <td>TOTAL</td>
                                <td>@(result.TotalCost.ToString("#.##")) $</td>
                                <td>@(result.FeedMixes.Sum(x=>x.UsageAmountKg).ToString("#.##")) kg</td>
                                <td>@(result.FeedMixes.Sum(x=>x.UsagePercentage).ToString("#.##")) %</td>
                            </tr>
                        </tfoot>
                    </MSimpleTable>
                }
            </MCard>
            <MButton Color="error" OnClick="()=>_step=2">Back</MButton>
            <MButton Color="success" Disabled=@(!isSolved ? true : false) OnClick="SaveRation">Save</MButton>
        </MStepperContent>
    </MStepperItems>
</MStepper>

@code {

    private Animal Animal = new();
    private FeedMixSummary result;
    private int _step = 1;

    ObservableCollection<Feed> sourceFeeds;
    ObservableCollection<Feed> targetFeeds = new();



    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        var feeds = await FeedRepository.GetFeedsAsync();
        sourceFeeds = new ObservableCollection<Feed>(feeds);
    }

    Feed draggedItem;

    void RowRender(RowRenderEventArgs<Feed> args)
    {
        args.Attributes.Add("title", "Drag row to move it to the other DataGrid");
        args.Attributes.Add("style", "cursor:grab");
        args.Attributes.Add("draggable", "true");
        args.Attributes.Add("ondragstart", EventCallback.Factory.Create<DragEventArgs>(this, () => draggedItem = args.Data));
    }

    void Move(ObservableCollection<Feed> source, ObservableCollection<Feed> target)
    {
        if (source.Contains(draggedItem))
        {
            source.Remove(draggedItem);
        }
        if (!target.Contains(draggedItem))
        {
            target.Add(draggedItem);
        }
    }

    RenderFragment RenderColumns()
    {
        return __builder =>
        {
            <text>
                <RadzenDataGridColumn TItem="Feed" Property="@nameof(Feed.Name)" Title="Name" Width="200px" />
                <RadzenDataGridColumn TItem="Feed" Property="@nameof(Feed.MaxUsage)" Title="Max" Width="100px" />
                <RadzenDataGridColumn TItem="Feed" Property="@nameof(Feed.MinUsage)" Title="Min" Width="100px" />
                <RadzenDataGridColumn TItem="Feed" Property="@nameof(Feed.CostPerKg)" Title="Cost" Width="100px" />
            </text>
        };
    }

    bool isSolved;
    void Calculate()
    {
        result = FeedMixer.CalculateOptimalFeedMix(Animal, targetFeeds.ToList());
        if (result.FeedMixes.Count > 0)
            isSolved = true;
        else
            isSolved = false;
        _step = 3;
    }

    void SaveRation()
    {

    }
}
